// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

var input = Fs.readFileSync("input/2017/day08", "utf8").split("\n");

function compute(map_of_reg, reg, value, op) {
  var prev_value = Belt_MapString.get(map_of_reg, reg);
  var value$prime = Caml_format.caml_int_of_string(value);
  if (prev_value !== undefined) {
    switch (op) {
      case "dec" :
          return Belt_MapString.set(map_of_reg, reg, prev_value - value$prime | 0);
      case "inc" :
          return Belt_MapString.set(map_of_reg, reg, prev_value + value$prime | 0);
      default:
        return map_of_reg;
    }
  } else {
    switch (op) {
      case "dec" :
          return Belt_MapString.set(map_of_reg, reg, -value$prime | 0);
      case "inc" :
          return Belt_MapString.set(map_of_reg, reg, 0 + value$prime | 0);
      default:
        return map_of_reg;
    }
  }
}

function check_condition(map_of_reg, reg, value, op) {
  var cur_value = Belt_MapString.get(map_of_reg, reg);
  var value$prime = Caml_format.caml_int_of_string(value);
  if (cur_value !== undefined) {
    switch (op) {
      case "!=" :
          if (cur_value !== value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: map_of_reg
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: map_of_reg
                  };
          }
      case "<" :
          if (cur_value < value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: map_of_reg
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: map_of_reg
                  };
          }
      case "<=" :
          if (cur_value <= value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: map_of_reg
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: map_of_reg
                  };
          }
      case "==" :
          if (cur_value === value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: map_of_reg
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: map_of_reg
                  };
          }
      case ">" :
          if (cur_value > value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: map_of_reg
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: map_of_reg
                  };
          }
      case ">=" :
          if (cur_value >= value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: map_of_reg
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: map_of_reg
                  };
          }
      default:
        return {
                TAG: /* Error */1,
                _0: map_of_reg
              };
    }
  } else {
    var new_map = Belt_MapString.set(map_of_reg, reg, 0);
    switch (op) {
      case "!=" :
          if (0 !== value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: new_map
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: new_map
                  };
          }
      case "<" :
          if (0 < value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: new_map
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: new_map
                  };
          }
      case "<=" :
          if (0 <= value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: new_map
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: new_map
                  };
          }
      case "==" :
          if (0 === value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: new_map
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: new_map
                  };
          }
      case ">" :
          if (0 > value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: new_map
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: new_map
                  };
          }
      case ">=" :
          if (0 >= value$prime) {
            return {
                    TAG: /* Ok */0,
                    _0: new_map
                  };
          } else {
            return {
                    TAG: /* Error */1,
                    _0: new_map
                  };
          }
      default:
        return {
                TAG: /* Error */1,
                _0: new_map
              };
    }
  }
}

function get_peak(map) {
  return Belt_MapString.reduce(map, 0, (function (acc, param, v) {
                if (acc > v) {
                  return acc;
                } else {
                  return v;
                }
              }));
}

function parse(instructions) {
  var map_of_reg = Belt_MapString.fromArray([]);
  var list_of_instructions = Belt_List.fromArray(instructions);
  var _map_of_reg$prime = map_of_reg;
  var _instructions$prime = list_of_instructions;
  var _val_of_peak$prime = 0;
  while(true) {
    var val_of_peak$prime = _val_of_peak$prime;
    var instructions$prime = _instructions$prime;
    var map_of_reg$prime = _map_of_reg$prime;
    var new_peak = get_peak(map_of_reg$prime);
    var next_peak = new_peak > val_of_peak$prime ? new_peak : val_of_peak$prime;
    if (!instructions$prime) {
      return [
              map_of_reg$prime,
              next_peak
            ];
    }
    var rest = instructions$prime.tl;
    var splitted = instructions$prime.hd.split(" ");
    var reg_of_computation = Belt_Option.getExn(Belt_Array.get(splitted, 0));
    var op_of_computation = Belt_Option.getExn(Belt_Array.get(splitted, 1));
    var val_of_computation = Belt_Option.getExn(Belt_Array.get(splitted, 2));
    var reg_of_condition = Belt_Option.getExn(Belt_Array.get(splitted, 4));
    var op_of_condition = Belt_Option.getExn(Belt_Array.get(splitted, 5));
    var val_of_condition = Belt_Option.getExn(Belt_Array.get(splitted, 6));
    var new_map = check_condition(map_of_reg$prime, reg_of_condition, val_of_condition, op_of_condition);
    if (new_map.TAG === /* Ok */0) {
      var result = compute(new_map._0, reg_of_computation, val_of_computation, op_of_computation);
      _val_of_peak$prime = next_peak;
      _instructions$prime = rest;
      _map_of_reg$prime = result;
      continue ;
    }
    _val_of_peak$prime = next_peak;
    _instructions$prime = rest;
    _map_of_reg$prime = new_map._0;
    continue ;
  };
}

var result = parse(input);

function get_part1(result) {
  return Belt_MapString.reduce(result[0], 0, (function (acc, param, v) {
                if (acc > v) {
                  return acc;
                } else {
                  return v;
                }
              }));
}

function get_part2(result) {
  return result[1];
}

console.log(get_part1(result));

console.log(get_part2(result));

exports.input = input;
exports.compute = compute;
exports.check_condition = check_condition;
exports.get_peak = get_peak;
exports.parse = parse;
exports.result = result;
exports.get_part1 = get_part1;
exports.get_part2 = get_part2;
/* input Not a pure module */
