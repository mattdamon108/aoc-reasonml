// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

var input = Fs.readFileSync("input/2017/day07", "utf8").split("\n");

function parse(input) {
  return Belt_MapString.fromArray(Belt_Array.reduce(Belt_Array.map(input, (function (param) {
                        return param.split(" -> ");
                      })), [], (function (acc, item) {
                    var children = Belt_Array.get(item, 1);
                    if (children === undefined) {
                      return acc;
                    }
                    var parent = Belt_Array.get(item, 0);
                    if (parent === undefined) {
                      return acc;
                    }
                    var parent_name = parent.split(" ");
                    var p_name = Belt_Array.get(parent_name, 0);
                    if (p_name !== undefined) {
                      return Belt_Array.concat(acc, Belt_Array.map(Belt_Array.map(children.split(", "), (function (prim) {
                                            return prim.trim();
                                          })), (function (child) {
                                        return [
                                                child,
                                                p_name
                                              ];
                                      })));
                    } else {
                      return acc;
                    }
                  })));
}

function parse_weight(input) {
  return Belt_MapString.fromArray(Belt_Array.reduce(Belt_Array.map(Belt_Array.reduce(Belt_Array.map(Belt_Array.map(input, (function (param) {
                                    return param.split(" -> ");
                                  })), (function (item) {
                                var program = Belt_Array.get(item, 0);
                                if (program !== undefined) {
                                  return program;
                                } else {
                                  return "";
                                }
                              })), [], (function (acc, item) {
                            if (item === "") {
                              return acc;
                            } else {
                              return Belt_Array.concat(acc, [item]);
                            }
                          })), (function (item) {
                        return item.split(" ");
                      })), [], (function (acc, item) {
                    var weight = Belt_Array.get(item, 1);
                    if (weight !== undefined) {
                      var with_weight = Belt_Array.get(item, 0);
                      if (with_weight !== undefined) {
                        return Belt_Array.concat(acc, [[
                                      with_weight,
                                      Caml_format.caml_int_of_string(weight.slice(1, -1))
                                    ]]);
                      } else {
                        return acc;
                      }
                    }
                    var without_weight = Belt_Array.get(item, 0);
                    if (without_weight !== undefined) {
                      return Belt_Array.concat(acc, [[
                                    without_weight,
                                    0
                                  ]]);
                    } else {
                      return acc;
                    }
                  })));
}

function find_root(map) {
  var entry_key = Belt_MapString.minKey(map);
  if (entry_key !== undefined) {
    var _next_key = entry_key;
    while(true) {
      var next_key = _next_key;
      var value = Belt_MapString.findFirstBy(map, (function(next_key){
          return function (k, param) {
            return k === next_key;
          }
          }(next_key)));
      if (value === undefined) {
        return next_key;
      }
      _next_key = value[1];
      continue ;
    };
  } else {
    return "not found";
  }
}

var root = find_root(parse(input));

var map_of_programs = parse(input);

var map_of_weight = parse_weight(input);

function get_children(current) {
  return Belt_Array.reduce(Belt_Array.map(current, (function (child) {
                    return Belt_Array.map(Belt_MapString.toArray(Belt_MapString.keep(map_of_programs, (function (param, v) {
                                          return v === child;
                                        }))), (function (child) {
                                  return child[0];
                                }));
                  })), [], Belt_Array.concat);
}

function sum_of_weight(name) {
  var sum_of_weight$prime = function (cur_children) {
    var children = get_children(cur_children);
    var weight_of_children = Belt_Array.reduce(children, 0, (function (sum, child) {
            var weight = Belt_MapString.getWithDefault(map_of_weight, child, 0);
            return sum + weight | 0;
          }));
    if (children.length !== 0) {
      return weight_of_children + sum_of_weight$prime(children.slice(0)) | 0;
    } else {
      return weight_of_children;
    }
  };
  return sum_of_weight$prime([name]) + Belt_MapString.getWithDefault(map_of_weight, name, 0) | 0;
}

console.log(get_children([root]));

console.log(Belt_Array.map(get_children([root]), (function (child) {
            return Belt_MapString.getWithDefault(map_of_weight, child, 0);
          })));

console.log(Belt_Array.map(get_children([root]), sum_of_weight));

console.log(get_children(["bntzksk"]));

console.log(Belt_Array.map(get_children(["bntzksk"]), (function (child) {
            return Belt_MapString.getWithDefault(map_of_weight, child, 0);
          })));

console.log(Belt_Array.map(get_children(["bntzksk"]), sum_of_weight));

console.log(root);

console.log(Belt_MapString.getWithDefault(map_of_weight, "vmttcwe", 0) - 8 | 0);

var part1;

var part2;

exports.input = input;
exports.parse = parse;
exports.parse_weight = parse_weight;
exports.find_root = find_root;
exports.root = root;
exports.map_of_programs = map_of_programs;
exports.map_of_weight = map_of_weight;
exports.get_children = get_children;
exports.sum_of_weight = sum_of_weight;
exports.part1 = part1;
exports.part2 = part2;
/* input Not a pure module */
