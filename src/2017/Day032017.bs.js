// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function find_square_by(_step, point) {
  while(true) {
    var step = _step;
    if (step !== 0) {
      if (Math.imul(step, step) >= point) {
        return step;
      }
      _step = step + 2 | 0;
      continue ;
    }
    _step = 1;
    continue ;
  };
}

function compute_distance(step, point) {
  var distance_from_apex = step - 1 | 0;
  var offset = Caml_int32.mod_(Math.imul(step, step) - point | 0, step - 1 | 0);
  var half = (step / 2 | 0) + 1 | 0;
  if (offset < half) {
    return distance_from_apex - offset | 0;
  } else {
    return distance_from_apex - ((step - offset | 0) - 1 | 0) | 0;
  }
}

console.log(compute_distance(find_square_by(0, 347991), 347991));

function isAdjacent(adj_x, adj_y, pos_x, pos_y) {
  if (adj_x === (pos_x + 1 | 0) && adj_y === pos_y || adj_x === (pos_x + 1 | 0) && adj_y === (pos_y - 1 | 0) || adj_x === pos_x && adj_y === (pos_y - 1 | 0) || adj_x === (pos_x - 1 | 0) && adj_y === (pos_y - 1 | 0) || adj_x === (pos_x - 1 | 0) && adj_y === pos_y || adj_x === (pos_x - 1 | 0) && adj_y === (pos_y + 1 | 0) || adj_x === pos_x && adj_y === (pos_y + 1 | 0)) {
    return true;
  } else if (adj_x === (pos_x + 1 | 0)) {
    return adj_y === (pos_y + 1 | 0);
  } else {
    return false;
  }
}

function sum_of_adjacent(moves, pos_x, pos_y) {
  return Belt_Array.reduce(moves, 0, (function (acc, item) {
                if (isAdjacent(item[0], item[1], pos_x, pos_y)) {
                  return acc + item[2] | 0;
                } else {
                  return acc;
                }
              }));
}

function walker(input, _moves, _x, _y, _prev_dir) {
  while(true) {
    var prev_dir = _prev_dir;
    var y = _y;
    var x = _x;
    var moves = _moves;
    var value = sum_of_adjacent(moves, x, y);
    var new_moves = Belt_Array.concat(moves, [[
            x,
            y,
            value
          ]]);
    if (value >= input) {
      return value;
    }
    if (prev_dir !== undefined) {
      switch (prev_dir) {
        case /* Right */0 :
            if (sum_of_adjacent(new_moves, x + 1 | 0, y) === value) {
              _prev_dir = /* Up */1;
              _y = y - 1 | 0;
              _moves = new_moves;
              continue ;
            }
            _prev_dir = /* Right */0;
            _x = x + 1 | 0;
            _moves = new_moves;
            continue ;
        case /* Up */1 :
            if (sum_of_adjacent(new_moves, x, y - 1 | 0) === value) {
              _prev_dir = /* Left */2;
              _x = x - 1 | 0;
              _moves = new_moves;
              continue ;
            }
            _prev_dir = /* Up */1;
            _y = y - 1 | 0;
            _moves = new_moves;
            continue ;
        case /* Left */2 :
            if (sum_of_adjacent(new_moves, x - 1 | 0, y) === value) {
              _prev_dir = /* Down */3;
              _y = y + 1 | 0;
              _moves = new_moves;
              continue ;
            }
            _prev_dir = /* Left */2;
            _x = x - 1 | 0;
            _moves = new_moves;
            continue ;
        case /* Down */3 :
            if (sum_of_adjacent(new_moves, x, y + 1 | 0) === value) {
              _prev_dir = /* Right */0;
              _x = x + 1 | 0;
              _moves = new_moves;
              continue ;
            }
            _prev_dir = /* Down */3;
            _y = y + 1 | 0;
            _moves = new_moves;
            continue ;
        
      }
    } else {
      _prev_dir = /* Right */0;
      _y = 0;
      _x = 1;
      _moves = [[
          0,
          0,
          1
        ]];
      continue ;
    }
  };
}

console.log(walker(347991, [], 0, 0, undefined));

var input = 347991;

var part1;

var part2;

exports.input = input;
exports.find_square_by = find_square_by;
exports.compute_distance = compute_distance;
exports.part1 = part1;
exports.isAdjacent = isAdjacent;
exports.sum_of_adjacent = sum_of_adjacent;
exports.walker = walker;
exports.part2 = part2;
/*  Not a pure module */
