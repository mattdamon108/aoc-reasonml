// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var input = Belt_Array.map(Fs.readFileSync("input/2017/day06", "utf8").split("\t"), Caml_format.caml_int_of_string);

function distribute(banks) {
  var bank_in_full = Belt_Array.reduceWithIndex(banks, [
        0,
        0
      ], (function (acc, item, idx) {
          if (acc[1] < item) {
            return [
                    idx,
                    item
                  ];
          } else {
            return acc;
          }
        }));
  var max = bank_in_full[1];
  var idx_of_max = bank_in_full[0];
  var length_of_queue = (max + idx_of_max | 0) + 1 | 0;
  Belt_Array.set(banks, idx_of_max, 0);
  return Belt_Array.reduceWithIndex(Belt_Array.mapWithIndex(Belt_Array.make(length_of_queue, 0), (function (idx, param) {
                    if (idx_of_max < idx && idx < ((max + idx_of_max | 0) + 1 | 0)) {
                      return 1;
                    } else {
                      return 0;
                    }
                  })), banks, (function (acc, item, idx) {
                var blocks = Belt_Array.get(banks, Caml_int32.mod_(idx, banks.length));
                if (blocks !== undefined) {
                  Belt_Array.set(acc, Caml_int32.mod_(idx, banks.length), blocks + item | 0);
                  return acc;
                } else {
                  return acc;
                }
              }));
}

function runner(_banks, _history, _param) {
  while(true) {
    var history = _history;
    var banks = _banks;
    var distributed_banks = distribute(banks.slice(0));
    if (history !== undefined) {
      var is_exists = Belt_Array.getIndexBy(history, (function(distributed_banks){
          return function (item) {
            return Caml_obj.caml_equal(item, distributed_banks);
          }
          }(distributed_banks)));
      if (is_exists !== undefined) {
        return [
                history.length,
                history.length - is_exists | 0
              ];
      }
      _param = undefined;
      _history = Belt_Array.concat(history, [distributed_banks]);
      _banks = distributed_banks;
      continue ;
    }
    _param = undefined;
    _history = [
      banks.slice(0),
      distributed_banks
    ];
    _banks = distributed_banks;
    continue ;
  };
}

console.log(runner(input, undefined, undefined));

var part1_2;

exports.input = input;
exports.distribute = distribute;
exports.runner = runner;
exports.part1_2 = part1_2;
/* input Not a pure module */
