// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

var inputTest = Fs.readFileSync("input/2020/day03test", "utf8").trim().split("\n");

var input = Fs.readFileSync("input/2020/day03", "utf8").trim().split("\n");

var cmp = Caml_obj.caml_compare;

var CoordCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

var width = Belt_Array.getExn(input, 0).length;

var height = input.length;

var mapOfTree = Belt_Array.reduce(Belt_Array.mapWithIndex(input, (function (idxY, slope) {
            return Belt_Array.mapWithIndex(slope.split(""), (function (idxX, point) {
                          if (point === "#") {
                            return [
                                    [
                                      idxX,
                                      idxY
                                    ],
                                    1
                                  ];
                          } else {
                            return [
                                    [
                                      idxX,
                                      idxY
                                    ],
                                    0
                                  ];
                          }
                        }));
          })), Belt_Map.make(CoordCmp), (function (acc, i) {
        return Belt_Array.reduce(i, acc, (function (a, point) {
                      var match = point[0];
                      return Belt_Map.set(a, [
                                  match[0],
                                  match[1]
                                ], point[1]);
                    }));
      }));

function toboggan(map, wide, $$long, startPoint, moveX, moveY) {
  var _x = startPoint[0];
  var _y = startPoint[1];
  var _count = 0;
  while(true) {
    var count = _count;
    var y = _y;
    var x = _x;
    if (y >= $$long) {
      return count;
    }
    var modX = Caml_int32.mod_(x, wide);
    var isTree = Belt_Map.getExn(map, [
          modX,
          y
        ]) === 1;
    var newCount = isTree ? count + 1 | 0 : count;
    _count = newCount;
    _y = y + moveY | 0;
    _x = x + moveX | 0;
    continue ;
  };
}

console.log(toboggan(mapOfTree, width, height, [
          0,
          0
        ], 3, 1));

var r1d1 = toboggan(mapOfTree, width, height, [
      0,
      0
    ], 1, 1);

var r3d1 = toboggan(mapOfTree, width, height, [
      0,
      0
    ], 3, 1);

var r5d1 = toboggan(mapOfTree, width, height, [
      0,
      0
    ], 5, 1);

var r7d1 = toboggan(mapOfTree, width, height, [
      0,
      0
    ], 7, 1);

var r1d2 = toboggan(mapOfTree, width, height, [
      0,
      0
    ], 1, 2);

console.log(r1d1 * r3d1 * r5d1 * r7d1 * r1d2);

exports.inputTest = inputTest;
exports.input = input;
exports.CoordCmp = CoordCmp;
exports.width = width;
exports.height = height;
exports.mapOfTree = mapOfTree;
exports.toboggan = toboggan;
exports.r1d1 = r1d1;
exports.r3d1 = r3d1;
exports.r5d1 = r5d1;
exports.r7d1 = r7d1;
exports.r1d2 = r1d2;
/* inputTest Not a pure module */
