// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var inputTest = Belt_Array.map(Fs.readFileSync("input/2020/day09test", "utf8").trim().split("\n"), Caml_format.caml_float_of_string);

var input = Belt_Array.map(Fs.readFileSync("input/2020/day09", "utf8").trim().split("\n"), Caml_format.caml_float_of_string);

function checkValid(nums, start, len) {
  var target = Belt_Array.getExn(nums, start + len | 0);
  var preamble = Belt_Array.slice(nums, start, len);
  return Belt_Array.some(preamble, (function (a) {
                return Belt_Array.some(preamble, (function (b) {
                              if (a === b) {
                                return false;
                              } else {
                                return a + b === target;
                              }
                            }));
              }));
}

function findInvalid(nums, _start, len) {
  while(true) {
    var start = _start;
    var count = nums.length;
    var isValid = checkValid(nums, start, len);
    if (!isValid || (start + len | 0) > count) {
      return Belt_Array.getExn(nums, start + len | 0);
    }
    _start = start + 1 | 0;
    continue ;
  };
}

function sum(nums, start, len) {
  return Belt_Array.reduce(Belt_Array.map(Belt_Array.range(start, (start + len | 0) - 1 | 0), (function (i) {
                    return Belt_Array.getExn(nums, i);
                  })), 0.0, (function (prim, prim$1) {
                return prim + prim$1;
              }));
}

var invalidNum = findInvalid(input, 0, 25);

var invalidNumTest = findInvalid(inputTest, 0, 5);

function findNumbers(nums, target) {
  var largest = Belt_Array.reduce(nums, 0.0, (function (prim, prim$1) {
          if (prim > prim$1) {
            return prim;
          } else {
            return prim$1;
          }
        }));
  var _s = 0;
  var _l = 2;
  while(true) {
    var l = _l;
    var s = _s;
    var count = nums.length;
    if ((s + l | 0) <= count) {
      var found = sum(nums, s, l) === target;
      if (found) {
        var weaknessNumbers = Belt_Array.map(Belt_Array.range(s, (s + l | 0) - 1 | 0), (function (idx) {
                return Belt_Array.getExn(nums, idx);
              }));
        var minNum = Belt_Array.reduce(weaknessNumbers, largest, (function (prim, prim$1) {
                if (prim < prim$1) {
                  return prim;
                } else {
                  return prim$1;
                }
              }));
        var maxNum = Belt_Array.reduce(weaknessNumbers, 0.0, (function (prim, prim$1) {
                if (prim > prim$1) {
                  return prim;
                } else {
                  return prim$1;
                }
              }));
        return minNum + maxNum;
      }
      _s = s + 1 | 0;
      continue ;
    }
    _l = l + 1 | 0;
    _s = 0;
    continue ;
  };
}

console.log(invalidNum);

console.log(findNumbers(input, invalidNum));

exports.inputTest = inputTest;
exports.input = input;
exports.checkValid = checkValid;
exports.findInvalid = findInvalid;
exports.sum = sum;
exports.invalidNum = invalidNum;
exports.invalidNumTest = invalidNumTest;
exports.findNumbers = findNumbers;
/* inputTest Not a pure module */
