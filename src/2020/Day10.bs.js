// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Utils$FirstReason = require("../util/Utils.bs.js");

var inputTest = Belt_Array.map(Fs.readFileSync("input/2020/day10test", "utf8").trim().split("\n"), Caml_format.caml_int_of_string);

var inputTest2 = Belt_Array.map(Fs.readFileSync("input/2020/day10test2", "utf8").trim().split("\n"), Caml_format.caml_int_of_string);

var input = Belt_Array.map(Fs.readFileSync("input/2020/day10", "utf8").trim().split("\n"), Caml_format.caml_int_of_string);

var cmp = Caml_obj.caml_compare;

var FloatCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function make(raw) {
  return Belt_List.toArray(Belt_List.sort(Belt_List.fromArray(raw), (function (a, b) {
                    return a - b | 0;
                  })));
}

function device(adapters) {
  return Belt_Array.reduce(adapters, 0.0, (function (prim, prim$1) {
                if (prim > prim$1) {
                  return prim;
                } else {
                  return prim$1;
                }
              }));
}

function addOutletDevice(adapters) {
  return Belt_Array.concat(Belt_Array.concat([0], adapters), [Belt_Array.reduce(adapters, 0, (function (prim, prim$1) {
                      if (prim > prim$1) {
                        return prim;
                      } else {
                        return prim$1;
                      }
                    })) + 3 | 0]);
}

function createDependencies(data) {
  return Belt_Array.reduce(data, Belt_Map.make(FloatCmp), (function (acc, adapter) {
                return Belt_Map.set(acc, adapter, Belt_Array.keep(data, (function (a) {
                                  if (adapter < a) {
                                    return a <= adapter + 3.0;
                                  } else {
                                    return false;
                                  }
                                })));
              }));
}

function run(data) {
  var compute = function (_adapters, _outlet, _acc) {
    while(true) {
      var acc = _acc;
      var outlet = _outlet;
      var adapters = _adapters;
      var j = Belt_Array.get(adapters, 0);
      if (j === undefined) {
        return Belt_Array.concat(acc, [3]);
      }
      var diff = j - outlet | 0;
      var newAcc = Belt_Array.concat(acc, [diff]);
      var restAdapters = Belt_Array.sliceToEnd(adapters, 1);
      _acc = newAcc;
      _outlet = j;
      _adapters = restAdapters;
      continue ;
    };
  };
  return Utils$FirstReason.frequencies(compute(data, 0, []));
}

function occurance(map, adapters, device) {
  var occ = Belt_Map.set(Belt_Map.make(FloatCmp), 0.0, 1.0);
  return Belt_Map.get(Belt_Array.reduce(adapters, occ, (function (acc, adapter) {
                    var nextAdapters = Belt_Map.get(map, adapter);
                    if (nextAdapters !== undefined) {
                      return Belt_Array.reduce(nextAdapters, acc, (function (ac, nAdapter) {
                                    var occurance = Belt_Map.get(acc, nAdapter);
                                    if (occurance !== undefined) {
                                      return Belt_Map.set(ac, nAdapter, occurance + Belt_Map.getExn(ac, adapter));
                                    } else {
                                      return Belt_Map.set(ac, nAdapter, 0.0 + Belt_Map.getExn(ac, adapter));
                                    }
                                  }));
                    } else {
                      return acc;
                    }
                  })), device);
}

var countOccurance = occurance;

var Connection = {
  FloatCmp: FloatCmp,
  make: make,
  outlet: 0,
  device: device,
  addOutletDevice: addOutletDevice,
  createDependencies: createDependencies,
  run: run,
  occurance: occurance,
  countOccurance: countOccurance
};

var adapters = Belt_Array.map(addOutletDevice(make(input)), (function (a) {
        return a;
      }));

var device$1 = device(adapters);

console.log(run(make(input)));

console.log(occurance(createDependencies(adapters), adapters, device$1));

exports.inputTest = inputTest;
exports.inputTest2 = inputTest2;
exports.input = input;
exports.Connection = Connection;
exports.adapters = adapters;
exports.device = device$1;
/* inputTest Not a pure module */
