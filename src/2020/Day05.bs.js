// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

var inputTest = Fs.readFileSync("input/2020/day05test", "utf8").trim().split("\n");

var input = Fs.readFileSync("input/2020/day05", "utf8").trim().split("\n");

var seatIds = Belt_Array.map(input, (function (code) {
        var rowCode = code.substring(0, 7);
        var colCode = code.substring(7);
        var row = Belt_Array.getExn(Belt_Array.reduce(rowCode.split(""), Belt_Array.range(0, 127), (function (acc, bf) {
                    var count = acc.length;
                    if (bf === "F") {
                      return Belt_Array.slice(acc, 0, count / 2 | 0);
                    } else {
                      return Belt_Array.sliceToEnd(acc, count / 2 | 0);
                    }
                  })), 0);
        var col = Belt_Array.getExn(Belt_Array.reduce(colCode.split(""), Belt_Array.range(0, 7), (function (acc, lr) {
                    var count = acc.length;
                    if (lr === "L") {
                      return Belt_Array.slice(acc, 0, count / 2 | 0);
                    } else {
                      return Belt_Array.sliceToEnd(acc, count / 2 | 0);
                    }
                  })), 0);
        return (row << 3) + col | 0;
      }));

console.log(Belt_Array.reduce(seatIds, 0, (function (prim, prim$1) {
            if (prim > prim$1) {
              return prim;
            } else {
              return prim$1;
            }
          })));

var sorted = Belt_List.sort(Belt_List.fromArray(seatIds), (function (a, b) {
        return a - b | 0;
      }));

var shifted = Belt_Option.getExn(Belt_Option.flatMap(Belt_List.drop(sorted, 1), (function (list) {
            return Belt_List.concat(list, {
                        hd: Belt_Array.reduce(seatIds, 0, (function (prim, prim$1) {
                                if (prim > prim$1) {
                                  return prim;
                                } else {
                                  return prim$1;
                                }
                              })) + 1 | 0,
                        tl: /* [] */0
                      });
          })));

var zipped = Belt_List.zip(sorted, shifted);

console.log(Belt_List.keep(zipped, (function (i) {
            return Math.abs(i[0] - i[1] | 0) > 1;
          })));

exports.inputTest = inputTest;
exports.input = input;
exports.seatIds = seatIds;
exports.sorted = sorted;
exports.shifted = shifted;
exports.zipped = zipped;
/* inputTest Not a pure module */
