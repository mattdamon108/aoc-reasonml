// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

var inputTest = Fs.readFileSync("input/2020/day04test", "utf8").trim().split("\n");

var input = Fs.readFileSync("input/2020/day04", "utf8").trim().split("\n");

function parse(raw) {
  var _data = raw;
  var _parsed = [];
  var _buffer = [];
  while(true) {
    var buffer = _buffer;
    var parsed = _parsed;
    var data = _data;
    if (data.length < 1) {
      return Belt_Array.concat(parsed, [buffer]);
    }
    var line = Belt_Array.getExn(data, 0);
    if (line !== "") {
      var splitted = Belt_Array.map(line.trim().split(" "), (function (item) {
              return Belt_Array.getExn(item.split(":"), 0);
            }));
      var newBuffer = Belt_Array.concat(buffer, splitted);
      _buffer = newBuffer;
      _data = Belt_Array.sliceToEnd(data, 1);
      continue ;
    }
    var newParsed = Belt_Array.concat(parsed, [buffer]);
    _buffer = [];
    _parsed = newParsed;
    _data = Belt_Array.sliceToEnd(data, 1);
    continue ;
  };
}

function parse2(raw) {
  var _data = raw;
  var _parsed = [];
  var _buffer = [];
  while(true) {
    var buffer = _buffer;
    var parsed = _parsed;
    var data = _data;
    if (data.length < 1) {
      return Belt_Array.concat(parsed, [buffer]);
    }
    var line = Belt_Array.getExn(data, 0);
    if (line !== "") {
      var splitted = Belt_Array.map(line.trim().split(" "), (function (item) {
              return item.split(":");
            }));
      var newBuffer = Belt_Array.concat(buffer, splitted);
      _buffer = newBuffer;
      _data = Belt_Array.sliceToEnd(data, 1);
      continue ;
    }
    var newParsed = Belt_Array.concat(parsed, [buffer]);
    _buffer = [];
    _parsed = newParsed;
    _data = Belt_Array.sliceToEnd(data, 1);
    continue ;
  };
}

function checkValid(passport) {
  if (Belt_Array.some(passport, (function (field) {
            return field === "byr";
          })) && Belt_Array.some(passport, (function (field) {
            return field === "iyr";
          })) && Belt_Array.some(passport, (function (field) {
            return field === "eyr";
          })) && Belt_Array.some(passport, (function (field) {
            return field === "hgt";
          })) && Belt_Array.some(passport, (function (field) {
            return field === "hcl";
          })) && Belt_Array.some(passport, (function (field) {
            return field === "ecl";
          }))) {
    return Belt_Array.some(passport, (function (field) {
                  return field === "pid";
                }));
  } else {
    return false;
  }
}

function checkValid2(passport) {
  if (Belt_Array.some(passport, (function (field) {
            var key = Belt_Array.getExn(field, 0);
            if (key !== "byr") {
              return false;
            }
            var value = Belt_Int.fromString(Belt_Array.getExn(field, 1));
            return value !== undefined && 1920 <= value ? value <= 2002 : false;
          })) && Belt_Array.some(passport, (function (field) {
            var key = Belt_Array.getExn(field, 0);
            if (key !== "iyr") {
              return false;
            }
            var value = Belt_Int.fromString(Belt_Array.getExn(field, 1));
            return value !== undefined && 2010 <= value ? value <= 2020 : false;
          })) && Belt_Array.some(passport, (function (field) {
            var key = Belt_Array.getExn(field, 0);
            if (key !== "eyr") {
              return false;
            }
            var value = Belt_Int.fromString(Belt_Array.getExn(field, 1));
            return value !== undefined && 2020 <= value ? value <= 2030 : false;
          })) && Belt_Array.some(passport, (function (field) {
            var key = Belt_Array.getExn(field, 0);
            if (key !== "hgt") {
              return false;
            }
            var value = Belt_Array.getExn(field, 1);
            var cm = value.split("cm");
            var lengthCm = cm.length;
            var inch = value.split("in");
            var lengthInch = inch.length;
            if (lengthCm > 1) {
              var valueCm = Belt_Int.fromString(Belt_Array.getExn(cm, 0));
              return valueCm !== undefined && 150 <= valueCm ? valueCm <= 193 : false;
            }
            if (lengthInch <= 1) {
              return false;
            }
            var valueIn = Belt_Int.fromString(Belt_Array.getExn(inch, 0));
            return valueIn !== undefined && 59 <= valueIn ? valueIn <= 76 : false;
          })) && Belt_Array.some(passport, (function (field) {
            var key = Belt_Array.getExn(field, 0);
            if (key !== "hcl") {
              return false;
            }
            var re = /^#[0-9|a-f]{6}$/g;
            var value = Belt_Array.getExn(field, 1);
            return re.test(value);
          })) && Belt_Array.some(passport, (function (field) {
            var key = Belt_Array.getExn(field, 0);
            if (key !== "ecl") {
              return false;
            }
            var value = Belt_Array.getExn(field, 1);
            var optional = [
              "amb",
              "blu",
              "brn",
              "gry",
              "grn",
              "hzl",
              "oth"
            ];
            return Belt_Array.some(optional, (function (option) {
                          return option === value;
                        }));
          }))) {
    return Belt_Array.some(passport, (function (field) {
                  var key = Belt_Array.getExn(field, 0);
                  if (key !== "pid") {
                    return false;
                  }
                  var re = /^[0-9]{9}$/g;
                  var value = Belt_Array.getExn(field, 1);
                  return re.test(value);
                }));
  } else {
    return false;
  }
}

console.log(Belt_Array.keep(Belt_Array.map(parse(input), checkValid), (function (valid) {
            return valid === true;
          })).length);

console.log(Belt_Array.keep(Belt_Array.map(parse2(input), checkValid2), (function (valid) {
            return valid === true;
          })).length);

exports.inputTest = inputTest;
exports.input = input;
exports.parse = parse;
exports.parse2 = parse2;
exports.checkValid = checkValid;
exports.checkValid2 = checkValid2;
/* inputTest Not a pure module */
