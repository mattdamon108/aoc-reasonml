// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function make(arr) {
  return arr;
}

function isEmpty(dq) {
  return dq.length === 0;
}

function addFront(dq, i) {
  return Belt_Array.concat([i], dq);
}

function addFrontMany(dq, cups) {
  return Belt_Array.concat(cups, dq);
}

function addBack(dq, i) {
  return Belt_Array.concat(dq, [i]);
}

function removeFront(dq) {
  return Belt_Array.sliceToEnd(dq, 1);
}

function removeBack(dq) {
  var length = dq.length;
  return Belt_Array.slice(dq, 0, length - 1 | 0);
}

function peekFront(dq) {
  return Belt_Array.get(dq, 0);
}

function peekBack(dq) {
  var length = dq.length;
  return Belt_Array.get(dq, length - 1 | 0);
}

var Deque = {
  make: make,
  isEmpty: isEmpty,
  addFront: addFront,
  addFrontMany: addFrontMany,
  addBack: addBack,
  removeFront: removeFront,
  removeBack: removeBack,
  peekFront: peekFront,
  peekBack: peekBack
};

var input = "871369452";

var UndefinedMax = Caml_exceptions.create("Day23-FirstReason.UndefinedMax");

function parse(data, addition) {
  var splitted = Belt_Array.map(data.split(""), Caml_format.caml_int_of_string);
  var maxSplitted = Belt_Array.reduce(splitted, 0, (function (prim, prim$1) {
          if (prim > prim$1) {
            return prim;
          } else {
            return prim$1;
          }
        }));
  var additional = Belt_Array.range(maxSplitted + 1 | 0, addition);
  var total = Belt_Array.concat(splitted, additional);
  var maxTotal = Belt_Array.reduce(total, 0, (function (prim, prim$1) {
          if (prim > prim$1) {
            return prim;
          } else {
            return prim$1;
          }
        }));
  var next = Belt_Array.make(maxTotal + 1 | 0, 0);
  Belt_Array.forEachWithIndex(total, (function (idx, cup) {
          var nv = Belt_Array.get(total, idx + 1 | 0);
          if (nv !== undefined) {
            Belt_Array.set(next, cup, nv);
          } else {
            Belt_Array.set(next, cup, Belt_Array.getExn(total, 0));
          }
          
        }));
  return next;
}

function target(cur, pick1, pick2, pick3, mc) {
  var _offset = 1;
  while(true) {
    var offset = _offset;
    var target$1 = cur - offset | 0;
    if (target$1 <= 0) {
      return Belt_Array.reduce(Belt_Array.keep([
                      mc,
                      mc - 1 | 0,
                      mc - 2 | 0,
                      mc - 3 | 0,
                      mc - 4 | 0
                    ], (function (i) {
                        return !(i === cur || i === pick1 || i === pick2 || i === pick3);
                      })), 0, (function (prim, prim$1) {
                    if (prim > prim$1) {
                      return prim;
                    } else {
                      return prim$1;
                    }
                  }));
    }
    if (target$1 !== pick1 && target$1 !== pick2 && target$1 !== pick3) {
      return target$1;
    }
    _offset = offset + 1 | 0;
    continue ;
  };
}

function move(next, first, count) {
  var maxCup = Belt_Array.reduce(next, 0, (function (prim, prim$1) {
          if (prim > prim$1) {
            return prim;
          } else {
            return prim$1;
          }
        }));
  var _cur = first;
  var _c = count;
  while(true) {
    var c = _c;
    var cur = _cur;
    if (c === 0) {
      return next;
    }
    var pick1 = Belt_Array.getExn(next, cur);
    var pick2 = Belt_Array.getExn(next, pick1);
    var pick3 = Belt_Array.getExn(next, pick2);
    var target$1 = target(cur, pick1, pick2, pick3, maxCup);
    var nextTarget = Belt_Array.getExn(next, target$1);
    var nextPick3 = Belt_Array.getExn(next, pick3);
    Belt_Array.set(next, target$1, pick1);
    Belt_Array.set(next, pick3, nextTarget);
    Belt_Array.set(next, cur, nextPick3);
    _c = c - 1 | 0;
    _cur = Belt_Array.getExn(next, cur);
    continue ;
  };
}

var CrabCups = {
  parse: parse,
  target: target,
  move: move
};

function part1(next, _after, _acc) {
  while(true) {
    var acc = _acc;
    var after = _after;
    var nextValue = Belt_Array.getExn(next, after);
    if (Belt_Array.some(acc, (function(nextValue){
          return function (a) {
            return a === nextValue;
          }
          }(nextValue)))) {
      return Belt_Array.joinWith(acc, "", (function (prim) {
                    return String(prim);
                  }));
    }
    _acc = Belt_Array.concat(acc, [nextValue]);
    _after = nextValue;
    continue ;
  };
}

function part2(next) {
  var nextOne = Belt_Array.getExn(next, 1);
  return nextOne * Belt_Array.getExn(next, nextOne);
}

console.log(part1(move(parse(input, 9), 8, 100), 1, []));

console.log(part2(move(parse(input, 1000000), 8, 10000000)));

var inputTest = "389125467";

exports.Deque = Deque;
exports.inputTest = inputTest;
exports.input = input;
exports.UndefinedMax = UndefinedMax;
exports.CrabCups = CrabCups;
exports.part1 = part1;
exports.part2 = part2;
/*  Not a pure module */
