// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Opt$FirstReason = require("../util/Opt.bs.js");

var inputTest = Fs.readFileSync("input/2020/day12test", "utf8").trim().split("\n");

var input = Fs.readFileSync("input/2020/day12", "utf8").trim().split("\n");

function parseInstruction(code) {
  var re = /^(\w)(\d+)/g;
  return Opt$FirstReason.let_(Caml_option.null_to_opt(re.exec(code)), (function (result) {
                return Opt$FirstReason.let_(Caml_option.nullable_to_opt(Belt_Array.getExn(result, 1)), (function (command) {
                              var command$prime;
                              switch (command) {
                                case "E" :
                                    command$prime = /* East */2;
                                    break;
                                case "F" :
                                    command$prime = /* Forward */6;
                                    break;
                                case "L" :
                                    command$prime = /* Left */4;
                                    break;
                                case "N" :
                                    command$prime = /* North */0;
                                    break;
                                case "R" :
                                    command$prime = /* Right */5;
                                    break;
                                case "S" :
                                    command$prime = /* South */1;
                                    break;
                                case "W" :
                                    command$prime = /* West */3;
                                    break;
                                default:
                                  command$prime = /* Forward */6;
                              }
                              return Opt$FirstReason.let_(Caml_option.nullable_to_opt(Belt_Array.getExn(result, 2)), (function (value) {
                                            var value$prime = Caml_format.caml_int_of_string(value);
                                            return [
                                                    command$prime,
                                                    value$prime
                                                  ];
                                          }));
                            }));
              }));
}

var countClockwise = [
  /* N */0,
  /* W */3,
  /* S */1,
  /* E */2
];

var clockwise = [
  /* N */0,
  /* E */2,
  /* S */1,
  /* W */3
];

function toValue(dir) {
  switch (dir) {
    case /* N */0 :
        return [
                0,
                -1
              ];
    case /* S */1 :
        return [
                0,
                1
              ];
    case /* E */2 :
        return [
                1,
                0
              ];
    case /* W */3 :
        return [
                -1,
                0
              ];
    
  }
}

function changeDirection(dir, param) {
  var degree = param[1];
  var command = param[0];
  if (command < 4) {
    return dir;
  }
  switch (command - 4 | 0) {
    case /* North */0 :
        var idx = Belt_Option.getExn(Belt_Array.getIndexBy(countClockwise, (function (d) {
                    return d === dir;
                  })));
        return Belt_Array.getExn(countClockwise, (idx + (degree / 90 | 0) | 0) % 4);
    case /* South */1 :
        var idx$1 = Belt_Option.getExn(Belt_Array.getIndexBy(clockwise, (function (d) {
                    return d === dir;
                  })));
        return Belt_Array.getExn(clockwise, (idx$1 + (degree / 90 | 0) | 0) % 4);
    case /* East */2 :
        return dir;
    
  }
}

var Direction = {
  countClockwise: countClockwise,
  clockwise: clockwise,
  toValue: toValue,
  changeDirection: changeDirection
};

function move(wayPoint, code) {
  var y = wayPoint[1];
  var x = wayPoint[0];
  var value = code[1];
  switch (code[0]) {
    case /* North */0 :
        return [
                x,
                y - value | 0
              ];
    case /* South */1 :
        return [
                x,
                y + value | 0
              ];
    case /* East */2 :
        return [
                x + value | 0,
                y
              ];
    case /* West */3 :
        return [
                x - value | 0,
                y
              ];
    case /* Left */4 :
        if (value >= 181) {
          if (value !== 270) {
            return wayPoint;
          } else {
            return [
                    -y | 0,
                    x
                  ];
          }
        } else if (value !== 90) {
          if (value >= 180) {
            return [
                    -x | 0,
                    -y | 0
                  ];
          } else {
            return wayPoint;
          }
        } else {
          return [
                  y,
                  -x | 0
                ];
        }
    case /* Right */5 :
        if (value >= 181) {
          if (value !== 270) {
            return wayPoint;
          } else {
            return [
                    y,
                    -x | 0
                  ];
          }
        } else if (value !== 90) {
          if (value >= 180) {
            return [
                    -x | 0,
                    -y | 0
                  ];
          } else {
            return wayPoint;
          }
        } else {
          return [
                  -y | 0,
                  x
                ];
        }
    case /* Forward */6 :
        return wayPoint;
    
  }
}

var WayPoint = {
  move: move
};

function move$1(cur, dir, code) {
  var value = code[1];
  var y = cur[1];
  var x = cur[0];
  var match = toValue(dir);
  switch (code[0]) {
    case /* North */0 :
        return [
                [
                  x,
                  y - value | 0
                ],
                dir
              ];
    case /* South */1 :
        return [
                [
                  x,
                  y + value | 0
                ],
                dir
              ];
    case /* East */2 :
        return [
                [
                  x + value | 0,
                  y
                ],
                dir
              ];
    case /* West */3 :
        return [
                [
                  x - value | 0,
                  y
                ],
                dir
              ];
    case /* Left */4 :
    case /* Right */5 :
        break;
    case /* Forward */6 :
        return [
                [
                  x + Math.imul(value, match[0]) | 0,
                  y + Math.imul(value, match[1]) | 0
                ],
                dir
              ];
    
  }
  var newDir = changeDirection(dir, code);
  return [
          cur,
          newDir
        ];
}

function move2(param, code) {
  var cur = param[1];
  var y = cur[1];
  var x = cur[0];
  var value = code[1];
  var wayPoint = param[0];
  var newWayPoint = move(wayPoint, code);
  if (code[0] >= 6) {
    return [
            wayPoint,
            [
              x + Math.imul(wayPoint[0], value) | 0,
              y + Math.imul(wayPoint[1], value) | 0
            ]
          ];
  } else {
    return [
            newWayPoint,
            [
              x,
              y
            ]
          ];
  }
}

function sail(codes) {
  return Belt_Array.reduce(Belt_Array.map(codes, parseInstruction), [
              [
                0,
                0
              ],
              /* E */2
            ], (function (cur, code) {
                if (code !== undefined) {
                  return move$1(cur[0], cur[1], code);
                } else {
                  return cur;
                }
              }));
}

function sail2(codes) {
  return Belt_Array.reduce(Belt_Array.map(codes, parseInstruction), [
              [
                10,
                -1
              ],
              [
                0,
                0
              ]
            ], (function (cur, code) {
                if (code !== undefined) {
                  return move2(cur, code);
                } else {
                  return cur;
                }
              }));
}

var Ship = {
  move: move$1,
  move2: move2,
  sail: sail,
  sail2: sail2
};

console.log(sail(input));

console.log(sail2(input));

exports.inputTest = inputTest;
exports.input = input;
exports.parseInstruction = parseInstruction;
exports.Direction = Direction;
exports.WayPoint = WayPoint;
exports.Ship = Ship;
/* inputTest Not a pure module */
