// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var inputTest = Fs.readFileSync("input/2020/d19test", "utf8").trim().split("\n\n");

var input = Fs.readFileSync("input/2020/d19", "utf8").trim().split("\n\n");

var UndefinedRuleZero = Caml_exceptions.create("Day19-FirstReason.UndefinedRuleZero");

var UndefinedRule = Caml_exceptions.create("Day19-FirstReason.UndefinedRule");

var UndefinedRuleMsg = Caml_exceptions.create("Day19-FirstReason.UndefinedRuleMsg");

var UndefinedPath = Caml_exceptions.create("Day19-FirstReason.UndefinedPath");

function parse(line) {
  var reRuleZero = /^0: (\d+) (\d+) (\d+)?/;
  var reRuleOr = /\|/;
  var reRule = /^(\d+): (\d+)\s?(\d+)?\s?\|?\s?(\d+)?\s?(\d+)?\s?(\d+)?/;
  var reRuleMsg = /^(\d+): "(\w+)"/;
  var isRuleZero = reRuleZero.test(line);
  var isRuleMsg = reRuleMsg.test(line);
  var isRuleOr = reRuleOr.test(line);
  if (isRuleZero) {
    var result = reRuleZero.exec(line);
    if (result !== null) {
      var first = Belt_Array.getExn(result, 1);
      var second = Belt_Array.getExn(result, 2);
      var third = Belt_Array.getExn(result, 3);
      return [
              0,
              (first == null) ? undefined : Caml_option.some(first),
              (second == null) ? undefined : Caml_option.some(second),
              (third == null) ? undefined : Caml_option.some(third),
              undefined,
              undefined,
              0
            ];
    }
    throw {
          RE_EXN_ID: UndefinedRuleZero,
          Error: new Error()
        };
  }
  if (isRuleMsg) {
    var result$1 = reRuleMsg.exec(line);
    if (result$1 !== null) {
      var ruleNum = Caml_format.caml_int_of_string(Belt_Option.getExn(Caml_option.nullable_to_opt(Belt_Array.getExn(result$1, 1))));
      var msg = Belt_Array.getExn(result$1, 2);
      return [
              ruleNum,
              (msg == null) ? undefined : Caml_option.some(msg),
              undefined,
              undefined,
              undefined,
              undefined,
              0
            ];
    }
    throw {
          RE_EXN_ID: UndefinedRuleMsg,
          Error: new Error()
        };
  }
  var result$2 = reRule.exec(line);
  if (isRuleOr) {
    var posOr = Belt_Array.getExn(Belt_Array.getExn(line.split(": "), 1).split(" | "), 0).split(" ").length;
    if (result$2 !== null) {
      var ruleNum$1 = Caml_format.caml_int_of_string(Belt_Option.getExn(Caml_option.nullable_to_opt(Belt_Array.getExn(result$2, 1))));
      var first$1 = Belt_Array.getExn(result$2, 2);
      var second$1 = Belt_Array.getExn(result$2, 3);
      var third$1 = Belt_Array.getExn(result$2, 4);
      var fourth = Belt_Array.getExn(result$2, 5);
      var fifth = Belt_Array.getExn(result$2, 6);
      return [
              ruleNum$1,
              (first$1 == null) ? undefined : Caml_option.some(first$1),
              (second$1 == null) ? undefined : Caml_option.some(second$1),
              (third$1 == null) ? undefined : Caml_option.some(third$1),
              (fourth == null) ? undefined : Caml_option.some(fourth),
              (fifth == null) ? undefined : Caml_option.some(fifth),
              posOr
            ];
    }
    throw {
          RE_EXN_ID: UndefinedRule,
          Error: new Error()
        };
  }
  if (result$2 !== null) {
    var ruleNum$2 = Caml_format.caml_int_of_string(Belt_Option.getExn(Caml_option.nullable_to_opt(Belt_Array.getExn(result$2, 1))));
    var first$2 = Belt_Array.getExn(result$2, 2);
    var second$2 = Belt_Array.getExn(result$2, 3);
    var third$2 = Belt_Array.getExn(result$2, 4);
    var fourth$1 = Belt_Array.getExn(result$2, 5);
    var fifth$1 = Belt_Array.getExn(result$2, 6);
    return [
            ruleNum$2,
            (first$2 == null) ? undefined : Caml_option.some(first$2),
            (second$2 == null) ? undefined : Caml_option.some(second$2),
            (third$2 == null) ? undefined : Caml_option.some(third$2),
            (fourth$1 == null) ? undefined : Caml_option.some(fourth$1),
            (fifth$1 == null) ? undefined : Caml_option.some(fifth$1),
            0
          ];
  }
  throw {
        RE_EXN_ID: UndefinedRule,
        Error: new Error()
      };
}

var rules = Belt_Array.map(Belt_Array.getExn(input, 0).split("\n"), parse);

var messages = Belt_Array.getExn(input, 1).split("\n");

var mapOfRules = Belt_Array.reduce(rules, undefined, (function (acc, line) {
        var posOr = line[6];
        var e = line[5];
        var d = line[4];
        var c = line[3];
        var b = line[2];
        var a = line[1];
        var ruleNum = line[0];
        if (ruleNum === 0) {
          var first = Caml_format.caml_int_of_string(Belt_Option.getExn(a));
          var second = Caml_format.caml_int_of_string(Belt_Option.getExn(b));
          var third = Belt_Option.map(c, Caml_format.caml_int_of_string);
          if (c !== undefined) {
            return Belt_MapInt.set(acc, 0, {
                        TAG: /* Top */0,
                        _0: first,
                        _1: second,
                        _2: third
                      });
          } else {
            return Belt_MapInt.set(acc, 0, {
                        TAG: /* Top */0,
                        _0: first,
                        _1: second,
                        _2: undefined
                      });
          }
        }
        var first$1 = Belt_Int.fromString(Belt_Option.getExn(a));
        if (first$1 !== undefined) {
          if (posOr > 0) {
            return Belt_MapInt.set(acc, ruleNum, {
                        TAG: /* RuleOr */1,
                        _0: Belt_Option.map(a, Caml_format.caml_int_of_string),
                        _1: Belt_Option.map(b, Caml_format.caml_int_of_string),
                        _2: Belt_Option.map(c, Caml_format.caml_int_of_string),
                        _3: Belt_Option.map(d, Caml_format.caml_int_of_string),
                        _4: Belt_Option.map(e, Caml_format.caml_int_of_string),
                        _5: posOr
                      });
          } else {
            return Belt_MapInt.set(acc, ruleNum, {
                        TAG: /* RuleAnd */2,
                        _0: Belt_Option.map(a, Caml_format.caml_int_of_string),
                        _1: Belt_Option.map(b, Caml_format.caml_int_of_string),
                        _2: Belt_Option.map(c, Caml_format.caml_int_of_string),
                        _3: Belt_Option.map(d, Caml_format.caml_int_of_string),
                        _4: Belt_Option.map(e, Caml_format.caml_int_of_string),
                        _5: 0
                      });
          }
        } else {
          return Belt_MapInt.set(acc, ruleNum, {
                      TAG: /* Msg */3,
                      _0: Belt_Option.getExn(a)
                    });
        }
      }));

function mapRule(count, f, r) {
  if (r !== undefined && !((r === 8 || r === 11) && count > 14)) {
    return Curry._2(f, count + 1 | 0, r);
  } else {
    return "";
  }
}

function generateRegex(map) {
  var generate = function (count, ruleNum) {
    var rule = Belt_MapInt.get(map, ruleNum);
    if (rule !== undefined) {
      switch (rule.TAG | 0) {
        case /* Top */0 :
            var c = rule._2;
            return generate(count, rule._0).concat(generate(count, rule._1), c !== undefined ? generate(c, count) : "");
        case /* RuleOr */1 :
            var e = rule._4;
            var d = rule._3;
            var c$1 = rule._2;
            var b = rule._1;
            var a = rule._0;
            if (rule._5 !== 1) {
              return "(".concat(mapRule(count, generate, a), mapRule(count, generate, b), "|", mapRule(count, generate, c$1), mapRule(count, generate, d), mapRule(count, generate, e), ")");
            } else {
              return "(".concat(mapRule(count, generate, a), "|", mapRule(count, generate, b), mapRule(count, generate, c$1), mapRule(count, generate, d), mapRule(count, generate, e), ")");
            }
        case /* RuleAnd */2 :
            return mapRule(count, generate, rule._0).concat(mapRule(count, generate, rule._1), mapRule(count, generate, rule._2), mapRule(count, generate, rule._3), mapRule(count, generate, rule._4));
        case /* Msg */3 :
            return rule._0;
        
      }
    } else {
      throw {
            RE_EXN_ID: UndefinedRule,
            Error: new Error()
          };
    }
  };
  return "^".concat(generate(0, 0), "$");
}

var reMessage = new RegExp(generateRegex(mapOfRules));

console.log(Belt_Array.reduce(Belt_Array.map(messages, (function (m) {
                return reMessage.test(m);
              })), 0, (function (acc, m) {
            if (m) {
              return acc + 1 | 0;
            } else {
              return acc;
            }
          })));

exports.inputTest = inputTest;
exports.input = input;
exports.UndefinedRuleZero = UndefinedRuleZero;
exports.UndefinedRule = UndefinedRule;
exports.UndefinedRuleMsg = UndefinedRuleMsg;
exports.UndefinedPath = UndefinedPath;
exports.parse = parse;
exports.rules = rules;
exports.messages = messages;
exports.mapOfRules = mapOfRules;
exports.mapRule = mapRule;
exports.generateRegex = generateRegex;
exports.reMessage = reMessage;
/* inputTest Not a pure module */
