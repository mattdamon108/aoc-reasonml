// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var inputTest = Fs.readFileSync("input/2020/d21test", "utf8").trim().split("\n");

var input = Fs.readFileSync("input/2020/d21", "utf8").trim().split("\n");

function parse(line) {
  var ingredients = Belt_Array.getExn(line.split(" (contains "), 0).split(" ");
  var allergens = Belt_Array.map(Belt_Array.getExn(line.split(" (contains "), 1).split(", "), (function (a) {
          return a.replace(")", "");
        }));
  return [
          allergens,
          ingredients
        ];
}

function duplicate(_xs, ys, _dups) {
  while(true) {
    var dups = _dups;
    var xs = _xs;
    var length = xs.length;
    if (length === 0) {
      return dups;
    }
    var first = Belt_Array.getExn(xs, 0);
    var rest = Belt_Array.sliceToEnd(xs, 1);
    if (Belt_Array.some(ys, (function(first){
          return function (y) {
            return y === first;
          }
          }(first)))) {
      _dups = Belt_Array.concat(dups, [first]);
      _xs = rest;
      continue ;
    }
    _xs = rest;
    continue ;
  };
}

var mapOfAllergens = Belt_Array.reduce(Belt_Array.map(input, parse), undefined, (function (acc, item) {
        var ingredients = item[1];
        return Belt_Array.reduce(item[0], acc, (function (ac, a) {
                      var prevIngredients = Belt_MapString.get(ac, a);
                      if (prevIngredients !== undefined) {
                        return Belt_MapString.set(ac, a, duplicate(prevIngredients, ingredients, []));
                      } else {
                        return Belt_MapString.set(ac, a, ingredients);
                      }
                    }));
      }));

function removeDups(map) {
  return Belt_MapString.reduce(map, undefined, (function (acc, k, v) {
                return Belt_Array.reduce(v, acc, Belt_SetString.add);
              }));
}

var allergens = removeDups(mapOfAllergens);

var AllMultipleIngredients = Caml_exceptions.create("Day21-FirstReason.AllMultipleIngredients");

function removeDups2(_map) {
  while(true) {
    var map = _map;
    var allUnique = Belt_MapString.every(map, (function (k, v) {
            return v.length === 1;
          }));
    if (allUnique) {
      return map;
    }
    var ingredients = Belt_MapString.keep(map, (function (k, v) {
            return v.length === 1;
          }));
    var keys = Belt_MapString.keysToArray(ingredients);
    var values = Belt_Array.reduce(Belt_MapString.valuesToArray(ingredients), [], Belt_Array.concat);
    _map = Belt_MapString.mapWithKey(map, (function(keys,values){
        return function (k, v) {
          if (Belt_Array.some(keys, (function (kys) {
                    return kys === k;
                  }))) {
            return v;
          } else {
            return Belt_Array.keep(v, (function (v$prime) {
                          return !Belt_Array.some(values, (function (vls) {
                                        return vls === v$prime;
                                      }));
                        }));
          }
        }
        }(keys,values)));
    continue ;
  };
}

console.log(Belt_Array.keep(Belt_Array.reduce(Belt_Array.map(input, parse), [], (function (acc, i) {
                return Belt_Array.concat(acc, i[1]);
              })), (function (i) {
            return !Belt_SetString.some(allergens, (function (a) {
                          return a === i;
                        }));
          })).length);

console.log(Belt_Array.reduce(Belt_Array.map(Belt_List.toArray(Belt_List.sort(Belt_MapString.toList(removeDups2(mapOfAllergens)), Caml_obj.caml_compare)), (function (i) {
                return Belt_Array.getExn(i[1], 0);
              })), "", (function (acc, i) {
            return acc.concat(i).concat(",");
          })));

exports.inputTest = inputTest;
exports.input = input;
exports.parse = parse;
exports.duplicate = duplicate;
exports.mapOfAllergens = mapOfAllergens;
exports.removeDups = removeDups;
exports.allergens = allergens;
exports.AllMultipleIngredients = AllMultipleIngredients;
exports.removeDups2 = removeDups2;
/* inputTest Not a pure module */
