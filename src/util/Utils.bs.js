// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_MapInt = require("bs-platform/lib/js/belt_MapInt.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function factorial(n) {
  var _m = n;
  var _answer = 1;
  while(true) {
    var answer = _answer;
    var m = _m;
    if (m === 0) {
      return answer;
    }
    var newAnswer = Math.imul(answer, m);
    _answer = newAnswer;
    _m = m - 1 | 0;
    continue ;
  };
}

var OutOfBound = Caml_exceptions.create("Utils-FirstReason.OutOfBound");

function combination(n, r) {
  if (n < r) {
    throw {
          RE_EXN_ID: OutOfBound,
          _1: "factorial error",
          Error: new Error()
        };
  }
  return Caml_int32.div(factorial(n), Math.imul(factorial(r), factorial(n - r | 0)));
}

function frequencies(arr) {
  return Belt_MapInt.toArray(Belt_Array.reduce(arr, undefined, (function (acc, item) {
                    var freq = Belt_MapInt.get(acc, item);
                    if (freq !== undefined) {
                      return Belt_MapInt.set(acc, item, freq + 1 | 0);
                    } else {
                      return Belt_MapInt.set(acc, item, 1);
                    }
                  })));
}

function partitionA(arr, n, step) {
  if (n <= 0 || step <= 0) {
    throw {
          RE_EXN_ID: OutOfBound,
          _1: "'n', 'step' should be a positive integer",
          Error: new Error()
        };
  }
  var total = arr.length;
  var _count = 0;
  var _sliced = [];
  while(true) {
    var sliced = _sliced;
    var count = _count;
    var start = Math.imul(count, step);
    var end_ = start + n | 0;
    if (end_ > total) {
      return sliced;
    }
    _sliced = Belt_Array.concat(sliced, [Belt_Array.slice(arr, start, n)]);
    _count = count + 1 | 0;
    continue ;
  };
}

function partitionAtoEnd(arr, n, step) {
  if (n <= 0 || step <= 0) {
    throw {
          RE_EXN_ID: OutOfBound,
          _1: "'n', 'step' should be a positive integer",
          Error: new Error()
        };
  }
  var total = arr.length;
  var _count = 0;
  var _sliced = [];
  while(true) {
    var sliced = _sliced;
    var count = _count;
    var start = Math.imul(count, step);
    var end_ = start + n | 0;
    if (end_ > total) {
      return Belt_Array.concat(sliced, [Belt_Array.slice(arr, start, n)]);
    }
    _sliced = Belt_Array.concat(sliced, [Belt_Array.slice(arr, start, n)]);
    _count = count + 1 | 0;
    continue ;
  };
}

exports.factorial = factorial;
exports.OutOfBound = OutOfBound;
exports.combination = combination;
exports.frequencies = frequencies;
exports.partitionA = partitionA;
exports.partitionAtoEnd = partitionAtoEnd;
/* No side effect */
